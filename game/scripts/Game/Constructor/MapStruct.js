// Generated by CoffeeScript 1.7.1
(function() {
  var app, _ref;

  window.app = (_ref = window.app) != null ? _ref : {};

  app = window.app;

  app.MapStruct = (function() {
    function MapStruct(map) {
      this.mapString = this.preprocessMap(map);
      this.map = [];
      this.processMap();
    }

    MapStruct.prototype.processMap = function() {
      var i, line, lines, row, _i, _j, _len, _ref1, _results;
      lines = this.mapString.split('\n');
      _results = [];
      for (_i = 0, _len = lines.length; _i < _len; _i++) {
        line = lines[_i];
        row = [];
        for (i = _j = 0, _ref1 = Math.floor(line.length / 3) - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; i = 0 <= _ref1 ? ++_j : --_j) {
          row.push(line.substring(i * 3, i * 3 + 3));
        }
        _results.push(this.map.push(row));
      }
      return _results;
    };

    MapStruct.prototype.set = function(x, y, sign) {
      var row;
      row = this.map[y];
      return row[x] = sign;
    };

    MapStruct.prototype.get = function(x, y) {
      var row;
      row = this.map[y];
      return row[x];
    };

    MapStruct.prototype.width = function() {
      return this.map[0].length;
    };

    MapStruct.prototype.height = function() {
      return this.map.length;
    };

    MapStruct.prototype.preprocessMap = function(map) {
      var lines;
      lines = map.split("\n");
      if (lines[0] === "\n") {
        return lines.skip(1).join("\n");
      }
      return lines.join("\n");
    };

    MapStruct.prototype.forEach = function(fun) {
      var x, y, _i, _ref1, _results;
      _results = [];
      for (x = _i = 0, _ref1 = this.width() - 1; 0 <= _ref1 ? _i <= _ref1 : _i >= _ref1; x = 0 <= _ref1 ? ++_i : --_i) {
        _results.push((function() {
          var _j, _ref2, _results1;
          _results1 = [];
          for (y = _j = 0, _ref2 = this.height() - 1; 0 <= _ref2 ? _j <= _ref2 : _j >= _ref2; y = 0 <= _ref2 ? ++_j : --_j) {
            _results1.push(fun(x, y, this.map[y][x]));
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    MapStruct.prototype.toString = function() {
      var line, res, row, _i, _len, _ref1;
      res = "";
      _ref1 = this.map;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        row = _ref1[_i];
        line = row.join('');
        res += line + "\n";
      }
      return res;
    };

    return MapStruct;

  })();

}).call(this);
